name: E2E Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sc-cache:
    name: Smart Contract → install & cache
    runs-on: ubuntu-latest
    outputs:
      lock-hash: ${{ steps.get-hash.outputs.hash }}
    steps:
      - name: Checkout hardhat-nft-marketplace
        uses: actions/checkout@v4
        with:
          repository: pleszkowicz/hardhat-nft-marketplace
          path: smart-contract

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.6.1

      - name: Download package-lock.json hash
        id: get-hash
        run: |
          echo "hash=$(sha256sum smart-contract/package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache SC node_modules
        uses: actions/cache@v4
        with:
          path: smart-contract/node_modules
          key: ${{ runner.os }}-sc-npm-${{ steps.get-hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-sc-npm-

      - name: Install SC dependencies
        run: |
          cd smart-contract
          npm ci

  fe-cache:
    name: Frontend → install & cache
    runs-on: ubuntu-latest
    outputs:
      pnpm-hash: ${{ steps.get-hash-fe.outputs.hash }}
      js-hash: ${{ steps.get-js-hash.outputs.hash }}
    steps:
      - name: Checkout frontend repo
        uses: actions/checkout@v4
        with:
          path: frontend

      - name: Setup Node.js 20.x & PNPM
        uses: actions/setup-node@v4
        with:
          node-version: 20.6.1
      - uses: pnpm/action-setup@v2
        with:
          version: 10.8.0

      - name: Download pnpm-lock.yaml hash
        id: get-hash-fe
        run: |
          echo "hash=$(sha256sum frontend/pnpm-lock.yaml | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Download all .js/.ts hashes for Next.js cache
        id: get-js-hash
        run: |
          JS_FILES=$(find frontend -type f \( -name '*.js' -o -name '*.jsx' -o -name '*.ts' -o -name '*.tsx' \) -exec sha256sum {} + | sort | sha256sum | cut -d' ' -f1)
          echo "hash=${JS_FILES}" >> $GITHUB_OUTPUT

      - name: Get pnpm store dir
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path 2>/dev/null || echo "/tmp/.pnpm-store")
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV

      - name: Cache pnpm store (frontend)
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ steps.get-hash-fe.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.get-hash-fe.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          cd frontend
          pnpm exec playwright install --with-deps chromium

      - name: Cache Next.js build-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            ${{ github.workspace }}/frontend/.next/cache
          key: ${{ runner.os }}-pnpm-nextjs-${{ steps.get-hash-fe.outputs.hash }}-${{ steps.get-js-hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-pnpm-nextjs-${{ steps.get-hash-fe.outputs.hash }}-

  e2e:
    name: E2E → deploy, build & test
    needs: [sc-cache, fe-cache]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frontend
        uses: actions/checkout@v4
        with:
          path: frontend

      - name: Checkout smart-contract
        uses: actions/checkout@v4
        with:
          repository: pleszkowicz/hardhat-nft-marketplace
          path: smart-contract

      - name: Setup Node.js 20.x & PNPM
        uses: actions/setup-node@v4
        with:
          node-version: 20.6.1
      - uses: pnpm/action-setup@v2
        with:
          version: 10.8.0

      - name: Get pnpm store dir
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path 2>/dev/null || echo "/tmp/.pnpm-store")
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV

      - name: Restore SC node_modules
        uses: actions/cache@v4
        with:
          path: smart-contract/node_modules
          key: ${{ runner.os }}-sc-npm-${{ needs.sc-cache.outputs.lock-hash }}
          restore-keys: |
            ${{ runner.os }}-sc-npm-

      - name: Restore pnpm store (frontend)
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ needs.fe-cache.outputs.pnpm-hash }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Restore Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.fe-cache.outputs.pnpm-hash }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install Playwright browsers
        run: |
          cd frontend
          pnpm exec playwright install --with-deps chromium

      - name: Restore Next.js build-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            ${{ github.workspace }}/frontend/.next/cache
          key: ${{ runner.os }}-pnpm-nextjs-${{ needs.fe-cache.outputs.pnpm-hash }}-${{ needs.fe-cache.outputs.js-hash }}
          restore-keys: |
            ${{ runner.os }}-pnpm-nextjs-${{ needs.fe-cache.outputs.pnpm-hash }}-

      - name: Start Hardhat Node (in the background)
        run: |
          cd smart-contract
          npx hardhat node --hostname 0.0.0.0 --port 8545 &

      - name: Wait for Hardhat RPC
        run: |
          cd smart-contract
          npx wait-on http://localhost:8545

      - name: Deploy contracts to local node
        run: |
          cd smart-contract
          npm run deploy:local > deploy-output.txt
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}

      - name: Extract contract address
        run: |
          mkdir -p frontend/lib/abi
          ADDRESS=$(grep -oE '0x[a-fA-F0-9]{40}' smart-contract/deploy-output.txt | head -1)
          echo "{\"NftMarketplace\":\"$ADDRESS\"}" > frontend/lib/abi/contract-address.json
          echo "NEXT_PUBLIC_CUSTOM_NFT_MARKETPLACE_SMART_CONTRACT_ADDRESS=$ADDRESS" >> $GITHUB_ENV

      - name: Copy ABI → FE
        run: |
          mkdir -p frontend/lib/abi
          cp smart-contract/artifacts/contracts/*/*.json frontend/lib/abi/

      # - name: Build frontend
      #   run: |
      #     cd frontend
      #     pnpm run build
      #   env:
      #     NEXT_PUBLIC_CUSTOM_NFT_MARKETPLACE_SMART_CONTRACT_ADDRESS: ${{ env.NEXT_PUBLIC_CUSTOM_NFT_MARKETPLACE_SMART_CONTRACT_ADDRESS }}
      #     NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.NEXT_PUBLIC_ALCHEMY_API_KEY }}
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Playwright starts a server internally
      - name: Run Playwright tests
        run: |
          cd frontend
          xvfb-run --auto-servernum -- pnpm exec playwright test --headed --timeout 60000
        env:
          CI: true
          NEXT_PUBLIC_CUSTOM_NFT_MARKETPLACE_SMART_CONTRACT_ADDRESS: ${{ env.NEXT_PUBLIC_CUSTOM_NFT_MARKETPLACE_SMART_CONTRACT_ADDRESS }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.NEXT_PUBLIC_ALCHEMY_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30
